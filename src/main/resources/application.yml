server:
  port: 5013
  servlet:
    context-path: /post-api
spring:
  application:
    name: hangout-post-service
  servlet:
    multipart:
      max-file-size: 1GB
      max-request-size: 1048MB
  datasource:
    driverClassName: org.postgresql.Driver
    url: jdbc:postgresql://${DB_URL}/${DB_NAME}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  sql:
    init:
      mode: always
  jpa:
    # database-platform: org.hibernate.spatial.dialect.postgis.PostgisDialect
    properties:
      hibernate:
        "[format_sql]": ${FORMAT_SQL}
        jdbc:
          "[batch_size]": ${DB_BATCH_SIZE}
        "[order_inserts]": ${ORDER_INSERTS}
        "[order_deletes]": ${ORDER_DELETES}
        "[generate_statistics]": ${GENERATE_DB_STATISTICS}
    hibernate:
      ddl-auto: update
    show-sql: true
  output:
    ansi:
      enabled: ALWAYS
  kafka:
    bootstrap-servers: ${KAFKA_SERVER}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: com.hangout.core.post_api.dto.event
      auto-offset-reset: earliest

# All traces should be sent to latency analysis tool
management:
  tracing:
    sampling:
      probability: 1.0
  endpoints:
    web:
      exposure:
        include: prometheus, health
  otlp:
    # configures the endpoint to send OTLP metrics. (Does not support GRPC)
    metrics:
      export:
        url: ${OTEL_COLLECTOR}/v1/metrics
    tracing:
      compression: gzip
  # For Exemplars to work we need histogram buckets
  metrics:
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui

minio:
  url: ${MINIO_SERVER}
  accessKey: ${MINIO_ACCESS_KEY}
  secretKey: ${MINIO_SECRET_KEY}

logging:
  level:
    web: error
    sql: error
    "[org.springframework.security]": error
    "[com.hangout.core]": trace
    # traceID and spanId are predefined MDC keys - we want the logs to include them
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"

hangout:
  kafka:
    content:
      topic: ${CONTENT_TOPIC}
    comment:
      topic: ${COMMENT_TOPIC}
    heart:
      topic: ${HEART_TOPIC}
      maxPollRecords: ${MAX_POLL_RECS}
      fetchMinBytes: ${MIN_BYTES}
      fetchMaxWaitMs: ${MAX_WAIT_MS}
  auth-service:
    url: ${AUTH_SERVICE}
  media:
    upload-bucket: ${UPLOAD_BUCKET}
  otel-collector:
    url: ${OTEL_COLLECTOR}
  allowed-origins:
    url: ${CLIENT_ORIGINS}
  page-length: ${PAGE_LENGTH}
  log:
    path: ${LOG_DIR}
